	public List<String> getNames() {
        
        return people.stream().map(Person::getName).collect(Collectors.toList());
    }

	
 public Stream<Person> getUniquelyNamedPeople() {
        //As per SOF Hash sets only contain unique values- no duplication.
        var names = new HashSet<>();
        return people.stream().filter(person -> names.add(person.getName()));
    }


    /**
     * @param character starting character of Person objects' name
     * @return a Stream of respective
     */ //TODO
    public Stream<Person> getUniquelyNamedPeopleStartingWith(Character character) {
        
     */ 
    public Stream<Person> getUniquelyNamedPeopleStartingWith(char character) {
        return getUniquelyNamedPeople().filter(person -> person.getName().toCharArray()[0] == character);
    }

    /**
     * @param n first `n` Person objects
     * @return a Stream of respective
     */ //TODO
     */
    public Stream<Person> getFirstNUniquelyNamedPeople(int n) {
        
        return getUniquelyNamedPeople().limit(n);
    }

    /**
     * @return a mapping of Person Id to the respective Person name
     */ // TODO
    public Map<Long, String> getIdToNameMap() {
       
        return people.stream().collect(Collectors.toMap(Person::getPersonalId, Person::getName));
    }


    /**
     * @return Stream of Stream of Aliases
     */ // TODO
    public Stream<Stream<String>> getNestedAliases() {
        
        return people.stream().map(person -> Stream.of(person.getAliases()));
    }


    /**
     * @return Stream of all Aliases
     */ // TODO
    public Stream<String> getAllAliases() {
        
        return getNestedAliases().flatMap(aliasesStream -> aliasesStream);
    }

====================================================================================================
public class StreamFilter {
    private final Stream<Person> personStream;
    public final String startingCharacter; //given

    public final char startingCharacter; //changed earlier line to
    
    /**
     * No arg constructor
     */ //TODO - construct person stream of 100 person objects; startingCharacter is a random capital letter
     */
    public StreamFilter() {
       
        this(Stream.empty(), RandomUtils.createCharacter('A', 'Z'));
    }

    
    /**
     
     * @param people            - Array of person objects
     * @param startingCharacter - character to filter by
     */ //TODO
     */
    public StreamFilter(Person[] people, Character startingCharacter) {
       
        this(Stream.empty(), startingCharacter);
    }

    
    /**
     
     * @param people            - List of person objects
     * @param startingCharacter - character to filter by
     */ //TODO
     */
    public StreamFilter(List<Person> people, Character startingCharacter) {
        
        this(Stream.empty(), startingCharacter);
    }


    
    
    /**
     * @param people - Stream of person objects
     
     * @param startingCharacter - character to filter by */
    
    public StreamFilter(Stream<Person> people, Character startingCharacter) {
        this.personStream = people;
        this.startingCharacter = startingCharacter.toString();
        this.startingCharacter = startingCharacter;
    }


    
    
    /**
     * Using multi-line lambda syntax
     *
     * @return a list of person object whose name starts with `this.startingCharacter`
     */ //TODO
     */
    public List<Person> toListMultiLine() {
        
        return personStream
                .filter(person -> {
                    return person.getName()
                            .toCharArray()[0] == startingCharacter;
                })
                .collect(Collectors.toList());
    }


    
    
    /**
     * Using one-line lambda syntax
     *
     * @return a list of person objects whose name starts with `this.startingCharacter`
     */ //TODO
     */
    public List<Person> toListOneLine() {
        
        return personStream.filter(person -> person.getName().toCharArray()[0] == startingCharacter).collect(Collectors.toList());
    }


    
    
    /**
     * Using one-line lambda syntax
     *
     * @return an array of person object whose name starts with `this.startingCharacter`
     */ //TODO
     */
    public Person[] toArrayOneLine() {
        
        return toListOneLine().toArray(Person[]::new);
    }


    
    
    /**
     * Using multi-line lambda syntax
     *
     * @return an array of person object whose name starts with `this.startingCharacter`
     */ //TODO
     */
    public Person[] toArrayMultiLine() {
        
        return toListMultiLine().toArray(Person[]::new);
    }

    
}
